version: "3.7"

services:

  mosquitto:
    image: eclipse-mosquitto:latest
    ports:
      - 1883:1883
      - 8883:8883
      - 9001:9001
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    networks:
      - bridge

  influxdb:
    container_name: influxdb
    image: influxdb:latest
    ports:
      - "8086:8086"
    environment: 
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: password
      DOCKER_INFLUXDB_INIT_ORG: computacio
      DOCKER_INFLUXDB_INIT_BUCKET: dades
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: s2d3rf67ren42i0gg666er9

    volumes:
      - ./data:/var/lib/influxdb
    networks:
      - bridge
  
  zookeeper:
    image: docker.io/bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: nc -z zookeeper 2181 || exit -1
      interval: 2s
      timeout: 25s
      retries: 15
    networks:
      - bridge
  kafka:
    image: docker.io/bitnami/kafka:3.6.0
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - ALLOW_ANONYMOUS_LOGIN=yes
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    depends_on:
      zookeeper: 
        condition: service_healthy
    healthcheck:
      test: kafka-topics.sh --bootstrap-server kafka:9092 --list || exit -1
      interval: 2s
      timeout: 25s
      retries: 15
    networks:
      - bridge
  
  albert-heat-pump:
    container_name: albert-heat-pump
    build: ./local/Albert/sensors/heat_pump
    command: python3 ./heat_pump.py
    environment:
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - MQTT_USERNAME=public
      - MQTT_PASSWORD=public
    networks:
      - bridge
    depends_on:
      mosquitto:
        condition: service_started


  albert-gateway:
    container_name: albert-gateway
    build: ./local/Albert/gateway
    command: python3 ./gateway.py
    environment:
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - MQTT_USERNAME=public
      - MQTT_PASSWORD=public
    networks:
      - bridge
    depends_on:
      mosquitto:
        condition: service_started
      kafka:
        condition: service_healthy

  save_microservice:
    container_name: save_microservice
    build: ./microservices/save_microservice
    command: python3 ./save.py
    environment:
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - MQTT_USERNAME=public
      - MQTT_PASSWORD=public
    networks:
      - bridge
    depends_on:
      kafka:
        condition: service_healthy

  clean_microservice:
    container_name: clean_microservice
    build: ./microservices/clean_microservice
    command: python3 ./clean.py
    environment:
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - MQTT_USERNAME=public
      - MQTT_PASSWORD=public
    networks:
      - bridge
    depends_on:
      kafka:
        condition: service_healthy

  actuate_microservice:
    container_name: actuate_microservice
    build: ./microservices/actuate_microservice
    command: python3 ./actuate.py
    environment:
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - MQTT_USERNAME=public
      - MQTT_PASSWORD=public
    networks:
      - bridge
    depends_on:
      kafka:
        condition: service_healthy
      mosquitto:
        condition: service_started

networks:
  bridge:
    driver: bridge
